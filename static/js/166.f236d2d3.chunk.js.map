{"version":3,"file":"static/js/166.f236d2d3.chunk.js","mappings":"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","sources":["styles/Cast.styled.jsx","components/Cast.jsx","service/movieAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastWrap = styled.ul`\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  height: fit-content;\n  max-height: 700px;\n  overflow-y: scroll;\n`;\nexport const CastItem = styled.li`\n  padding: 10px 20px;\n  max-width: 340px;\n  height: 500px;\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const Img = styled.img`\n  width: 90%;\n`;\n\nexport const CastDetails = styled.div`\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  width: 100%;\n`;\nexport const CastText = styled.p`\n  font-size: 15px;\n  line-height: 1.14;\n  font-weight: 500;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCredits, BASE_IMG_URL } from 'service/movieAPI';\nimport { CastWrap, CastItem, CastText, CastDetails } from 'styles/Cast.styled';\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getCast() {\n      try {\n        const data = await getCredits(movieId);\n        if (!data.cast.length) {\n          throw new Error(\"We don't have cast list for this movie\");\n        }\n        setCast(data.cast);\n      } catch (error) {\n          setError(error)\n      }\n    }\n    getCast();\n  }, [movieId]);\n  return (\n    <>\n      {error && <p>{error.message}</p>}\n      <CastWrap>\n        {cast.map(person => (\n          <CastItem key={person.id}>\n            {person.profile_path ? (\n              <img\n                src={BASE_IMG_URL + person.profile_path}\n                alt={person.name}\n                width={300}\n              />\n            ) : (\n              <img\n                src={require('../img/unknown.png')}\n                alt={person.name}\n                width={300}\n              />\n            )}\n            <CastDetails>\n              <CastText CastText>{person.name}</CastText>\n              <CastText>Character: {person.character}</CastText>\n            </CastDetails>\n          </CastItem>\n        ))}\n      </CastWrap>\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nconst API_KEY = 'f5c750e62498ce7d84b29e02e1f941bc'\nconst BASE_URL = 'https://api.themoviedb.org/3'\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/original/';\n\nexport async function getTrending(page = 1) {\n    try {\n        const response = await axios.get(`${BASE_URL}/trending/movie/day`, {\n            params: {\n                api_key: `${API_KEY}`,\n                page\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport async function searchByName(query = '', page = 1) {\n    try {\n        const response = await axios.get(`${BASE_URL}/search/movie`, {\n            params: {\n                api_key: `${API_KEY}`,\n                query,\n                page\n            }\n        });\n        return response.data;\n    } catch (e) {\n        console.log(e)\n    }\n}\n\nexport async function getMovieDetails(id) {\n    try {\n        const response = await axios.get(`${BASE_URL}/movie/${id}`, {\n            params: {\n                api_key: `${API_KEY}`,\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport async function getCredits(id) {\n    try {\n        const response = await axios.get(`${BASE_URL}/movie/${id}/credits`, {\n            params: {\n                api_key: `${API_KEY}`,\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport async function getReviews(id) {\n    try {\n        const response = await axios.get(`${BASE_URL}/movie/${id}/reviews`, {\n            params: {\n                api_key: `${API_KEY}`,\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport async function getVideo(id) {\n    try {\n        const response = await axios.get(`${BASE_URL}/movie/${id}/videos`, {\n            params: {\n                api_key: `${API_KEY}`,\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.log(error)\n    }\n}"],"names":["CastWrap","styled","CastItem","CastDetails","CastText","useState","cast","setCast","error","setError","movieId","useParams","useEffect","getCredits","data","length","Error","getCast","message","map","person","profile_path","src","BASE_IMG_URL","alt","name","width","require","character","id","API_KEY","BASE_URL","getTrending","page","axios","params","api_key","response","console","searchByName","query","log","getMovieDetails","getReviews","getVideo"],"sourceRoot":""}