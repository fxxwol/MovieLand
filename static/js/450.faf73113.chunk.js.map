{"version":3,"file":"static/js/450.faf73113.chunk.js","mappings":"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","sources":["components/SearchBar.jsx","pages/Movies.jsx","service/movieAPI.js"],"sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function SearchBar({ onSubmit }) {\n  const [query, setQuery] = useState('');\n\n  const handleInput = e => {\n    setQuery(e.target.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <header className=\"Searchbar\">\n      <form className=\"SearchForm\" onSubmit={handleSubmit}>\n        <input\n          className=\"SearchForm-input\"\n          type=\"text\"\n          name=\"query\"\n          value={query}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n          onChange={handleInput}\n        />\n        <button type=\"submit\" className=\"SearchForm-button\">\n          <span className=\"SearchForm-button-label\">Search</span>\n        </button>\n      </form>\n    </header>\n  );\n}\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport SearchBar from 'components/SearchBar';\nimport { searchByName } from 'service/movieAPI';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Loader } from 'components/Loader';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams({});\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('');\n  const query = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  const handleSearch = searchQuery => {\n    if (!searchQuery.trim()) {\n      toast.error('Enter a query to search!');\n      setSearchParams({});\n      return;\n    }\n    setSearchParams({ query: searchQuery });\n  };\n\n  useEffect(() => {\n     if (!query) {\n       setMovies([]);\n       setStatus('')\n       return;\n     }\n    async function getByName() {\n      try {\n       \n        const data = await searchByName(query);\n        if (!data.total_results) {\n          throw new Error(\n            'Sorry, there are no movies matching your search query. Please try again'\n          );\n        }\n        setMovies(data.results);\n        setStatus('resolved');\n      } catch (error) {\n        setError(error);\n        setStatus('rejected');\n      }\n    }\n    getByName();\n    setStatus('pending');\n    setError(null)\n  }, [query]);\n\n  return (\n    <>\n      <SearchBar onSubmit={handleSearch} />\n      {status === 'pending' && <Loader />}\n      {status === 'resolved' && (\n        <ul>\n          {movies.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n      {status=== 'rejected' && <h1>{error.message}</h1>}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\nconst API_KEY = 'f5c750e62498ce7d84b29e02e1f941bc'\nconst BASE_URL = 'https://api.themoviedb.org/3'\n\nexport async function getTrending() {\n    try {\n        const response = await axios.get(`${BASE_URL}/trending/movie/day`, {\n            params: {\n                api_key: `${API_KEY}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport async function searchByName(query = '') {\n    try {\n        const response = await axios.get(`${BASE_URL}/search/movie`, {\n            params: {\n                api_key: `${API_KEY}`,\n                query\n            }\n        });\n        return response.data;\n    } catch (e) {\n        console.log(e)\n    }\n}\n\nexport async function getMovieDetails(id){ \ntry {\n    const response = await axios.get(`${BASE_URL}/movie/${id}`, {\n        params: {\n            api_key: `${API_KEY}`,\n        }\n    });\n    return response.data;\n} catch (error) {\n    console.log(error)\n}\n}"],"names":["SearchBar","onSubmit","useState","query","setQuery","className","e","preventDefault","type","name","value","autoComplete","autoFocus","placeholder","onChange","target","toLowerCase","useSearchParams","searchParams","setSearchParams","movies","setMovies","error","setError","status","setStatus","get","location","useLocation","useEffect","searchByName","data","total_results","Error","results","getByName","searchQuery","trim","toast","Loader","map","id","title","to","state","from","message","API_KEY","BASE_URL","getTrending","axios","params","api_key","response","console","log","getMovieDetails"],"sourceRoot":""}