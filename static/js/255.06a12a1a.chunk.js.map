{"version":3,"file":"static/js/255.06a12a1a.chunk.js","mappings":"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","sources":["styles/Reviews.styled.jsx","components/Reviews.jsx","service/movieAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  height: fit-content;\n  max-height: 700px;\n  overflow-y: scroll;\n  margin-bottom: 20px;\n`;\nexport const ReviewCard = styled.li`\n  padding: 10px;\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n  border-radius: 4px;\n`;\n\nexport const ReviewContent = styled.p`\n    margin-bottom: 10px;\n`","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from 'service/movieAPI';\nimport { ReviewCard, ReviewContent, ReviewList } from 'styles/Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const {movieId} = useParams();\n  \n\n  useEffect(() => {\n    async function getAllReviews() {\n      try {\n          const data = await getReviews(movieId);\n          if (!data.total_results) {\n            throw new Error(\"We don't have any reviews for this movie\");\n          }\n        setReviews(data.results);\n      } catch (error) {\n          setError(error)\n      }\n    }\n    getAllReviews();\n  }, [movieId]);\n\n  return (\n      <>\n          {error && <h2>{ error.message}</h2>}\n      <ReviewList>\n        {reviews.map(review => (\n          <ReviewCard key={review.id}>\n            <h3>Author: {review.author}</h3>\n            <ReviewContent>{review.content}</ReviewContent>\n          </ReviewCard>\n        ))}\n      </ReviewList>\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nconst API_KEY = 'f5c750e62498ce7d84b29e02e1f941bc'\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/original/';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport async function getTrending(page = 1) {\n    try {\n        const response = await axios.get(`/trending/movie/day`, {\n            params: {\n                api_key: `${API_KEY}`,\n                page\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport async function searchByName(query = '', page = 1) {\n    try {\n        const response = await axios.get(`/search/movie`, {\n            params: {\n                api_key: `${API_KEY}`,\n                query,\n                page\n            }\n        });\n        return response.data;\n    } catch (e) {\n        console.log(e)\n    }\n}\n\nexport async function getMovieDetails(id) {\n    try {\n        const response = await axios.get(`/movie/${id}`, {\n            params: {\n                api_key: `${API_KEY}`,\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport async function getCredits(id) {\n    try {\n        const response = await axios.get(`/movie/${id}/credits`, {\n            params: {\n                api_key: `${API_KEY}`,\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport async function getReviews(id) {\n    try {\n        const response = await axios.get(`/movie/${id}/reviews`, {\n            params: {\n                api_key: `${API_KEY}`,\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport async function getVideo(id) {\n    try {\n        const response = await axios.get(`/movie/${id}/videos`, {\n            params: {\n                api_key: `${API_KEY}`,\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport async function getImages(id) {\n    try {\n        const response = await axios.get(`/movie/${id}/images`, {\n            params: {\n                api_key: `${API_KEY}`,\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport async function getGenres(id) {\n    try {\n        const response = await axios.get(`/genre/movie/list`, {\n            params: {\n                api_key: `${API_KEY}`,\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.log(error)\n    }\n}"],"names":["ReviewList","styled","ReviewCard","ReviewContent","useState","reviews","setReviews","error","setError","movieId","useParams","useEffect","getReviews","data","total_results","Error","results","getAllReviews","message","map","review","author","content","id","API_KEY","BASE_IMG_URL","getTrending","page","axios","params","api_key","response","console","searchByName","query","log","getMovieDetails","getCredits","getVideo","getImages"],"sourceRoot":""}